
avrcurtain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000353  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017f  00000000  00000000  00000637  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000240  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e2  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c3  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee ec       	ldi	r30, 0xCE	; 206
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	a6 d0       	rcall	.+332    	; 0x18e <main>
  42:	c3 c0       	rjmp	.+390    	; 0x1ca <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <goLeft>:
// P2 - End-stop Left
// P3 - End-stop Right
// P4 - Activation switch

void goLeft() {
	setBit(PORTB, PB0);
  46:	c0 9a       	sbi	0x18, 0	; 24
    unsetBit(PORTB, PB1);
  48:	c1 98       	cbi	0x18, 1	; 24
  4a:	08 95       	ret

0000004c <goRight>:
}

void goRight() {
    unsetBit(PORTB, PB0);
  4c:	c0 98       	cbi	0x18, 0	; 24
    setBit(PORTB, PB1);
  4e:	c1 9a       	sbi	0x18, 1	; 24
  50:	08 95       	ret

00000052 <isGoingLeft>:
}

unsigned int isGoingLeft() {
    return (readBit(PORTB, PB0) != 0) && (readBit(PORTB, PB1) == 0);
  52:	c0 9b       	sbis	0x18, 0	; 24
  54:	07 c0       	rjmp	.+14     	; 0x64 <isGoingLeft+0x12>
  56:	88 b3       	in	r24, 0x18	; 24
  58:	86 95       	lsr	r24
  5a:	91 e0       	ldi	r25, 0x01	; 1
  5c:	89 27       	eor	r24, r25
  5e:	81 70       	andi	r24, 0x01	; 1
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	08 95       	ret
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
}
  68:	08 95       	ret

0000006a <isGoingRight>:

unsigned int isGoingRight() {
    return (readBit(PORTB, PB0) == 0) && (readBit(PORTB, PB1) != 0);
  6a:	c0 99       	sbic	0x18, 0	; 24
  6c:	05 c0       	rjmp	.+10     	; 0x78 <isGoingRight+0xe>
  6e:	88 b3       	in	r24, 0x18	; 24
  70:	86 95       	lsr	r24
  72:	81 70       	andi	r24, 0x01	; 1
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	08 95       	ret
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
}
  7c:	08 95       	ret

0000007e <isAtEndStopLeft>:

unsigned int isAtEndStopLeft() {
    return readBit(PINB, PINB2) == 0;
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	86 95       	lsr	r24
  82:	86 95       	lsr	r24
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	89 27       	eor	r24, r25
}
  88:	81 70       	andi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	08 95       	ret

0000008e <isAtEndStopRight>:

unsigned int isAtEndStopRight() {
    return readBit(PINB, PINB3) == 0;
  8e:	86 b3       	in	r24, 0x16	; 22
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	89 27       	eor	r24, r25
}
  9a:	81 70       	andi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <isMoving>:

unsigned int isMoving() {
    return isGoingLeft() || isGoingRight();
  a0:	d8 df       	rcall	.-80     	; 0x52 <isGoingLeft>
  a2:	89 2b       	or	r24, r25
  a4:	49 f4       	brne	.+18     	; 0xb8 <isMoving+0x18>
  a6:	e1 df       	rcall	.-62     	; 0x6a <isGoingRight>
  a8:	31 e0       	ldi	r19, 0x01	; 1
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	89 2b       	or	r24, r25
  ae:	09 f4       	brne	.+2      	; 0xb2 <isMoving+0x12>
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	83 2f       	mov	r24, r19
  b4:	92 2f       	mov	r25, r18
  b6:	08 95       	ret
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
}
  bc:	08 95       	ret

000000be <stop>:

void stop() {
    // Move away from end-stop
    if (isGoingLeft() && isAtEndStopLeft()) {
  be:	c9 df       	rcall	.-110    	; 0x52 <isGoingLeft>
  c0:	89 2b       	or	r24, r25
  c2:	29 f0       	breq	.+10     	; 0xce <stop+0x10>
  c4:	dc df       	rcall	.-72     	; 0x7e <isAtEndStopLeft>
  c6:	89 2b       	or	r24, r25
  c8:	11 f0       	breq	.+4      	; 0xce <stop+0x10>
        goRight();
  ca:	c0 df       	rcall	.-128    	; 0x4c <goRight>
  cc:	07 c0       	rjmp	.+14     	; 0xdc <stop+0x1e>
    }
    else if (isGoingRight() && isAtEndStopRight()) {
  ce:	cd df       	rcall	.-102    	; 0x6a <isGoingRight>
  d0:	89 2b       	or	r24, r25
  d2:	21 f0       	breq	.+8      	; 0xdc <stop+0x1e>
  d4:	dc df       	rcall	.-72     	; 0x8e <isAtEndStopRight>
  d6:	89 2b       	or	r24, r25
  d8:	09 f0       	breq	.+2      	; 0xdc <stop+0x1e>
        goLeft();
  da:	b5 df       	rcall	.-150    	; 0x46 <goLeft>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	87 ea       	ldi	r24, 0xA7	; 167
  de:	91 e6       	ldi	r25, 0x61	; 97
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <stop+0x22>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <stop+0x28>
  e6:	00 00       	nop
    }

    _delay_ms(100);

    unsetBit(PORTB, PB0);
  e8:	c0 98       	cbi	0x18, 0	; 24
    unsetBit(PORTB, PB1);
  ea:	c1 98       	cbi	0x18, 1	; 24
  ec:	08 95       	ret

000000ee <getActivationSwitchState>:
}

unsigned int getActivationSwitchState() {
    unsigned int state = readBit(PINB, PINB4);
  ee:	26 b3       	in	r18, 0x16	; 22
	
	uint8_t c = 0;

	while (readBit(PINB, PINB4) == state && state == 0)  {
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	80 71       	andi	r24, 0x10	; 16
  f4:	90 e0       	ldi	r25, 0x00	; 0
    unsetBit(PORTB, PB0);
    unsetBit(PORTB, PB1);
}

unsigned int getActivationSwitchState() {
    unsigned int state = readBit(PINB, PINB4);
  f6:	20 71       	andi	r18, 0x10	; 16
  f8:	30 e0       	ldi	r19, 0x00	; 0
	
	uint8_t c = 0;

	while (readBit(PINB, PINB4) == state && state == 0)  {
  fa:	82 17       	cp	r24, r18
  fc:	93 07       	cpc	r25, r19
  fe:	69 f4       	brne	.+26     	; 0x11a <getActivationSwitchState+0x2c>
 100:	89 2b       	or	r24, r25
 102:	59 f4       	brne	.+22     	; 0x11a <getActivationSwitchState+0x2c>
}

unsigned int getActivationSwitchState() {
    unsigned int state = readBit(PINB, PINB4);
	
	uint8_t c = 0;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e3 ec       	ldi	r30, 0xC3	; 195
 108:	f9 e0       	ldi	r31, 0x09	; 9
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <getActivationSwitchState+0x1c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <getActivationSwitchState+0x22>
 110:	00 00       	nop

	while (readBit(PINB, PINB4) == state && state == 0)  {
		_delay_ms(10);

		c++;
 112:	8f 5f       	subi	r24, 0xFF	; 255
unsigned int getActivationSwitchState() {
    unsigned int state = readBit(PINB, PINB4);
	
	uint8_t c = 0;

	while (readBit(PINB, PINB4) == state && state == 0)  {
 114:	b4 9b       	sbis	0x16, 4	; 22
 116:	f7 cf       	rjmp	.-18     	; 0x106 <getActivationSwitchState+0x18>
 118:	06 c0       	rjmp	.+12     	; 0x126 <getActivationSwitchState+0x38>
		_delay_ms(10);

		c++;
	}

	return state == 0 && c >= 50;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret
 126:	82 33       	cpi	r24, 0x32	; 50
 128:	c0 f3       	brcs	.-16     	; 0x11a <getActivationSwitchState+0x2c>
 12a:	fa cf       	rjmp	.-12     	; 0x120 <getActivationSwitchState+0x32>

0000012c <toggleMotorState>:

// initial direction;
static int direction = 1;

void toggleMotorState() {
    if (isMoving()) {
 12c:	b9 df       	rcall	.-142    	; 0xa0 <isMoving>
 12e:	89 2b       	or	r24, r25
 130:	11 f0       	breq	.+4      	; 0x136 <toggleMotorState+0xa>
        stop();
 132:	c5 df       	rcall	.-118    	; 0xbe <stop>
 134:	08 95       	ret
    }
    else if (isAtEndStopLeft()) {
 136:	a3 df       	rcall	.-186    	; 0x7e <isAtEndStopLeft>
 138:	89 2b       	or	r24, r25
 13a:	41 f0       	breq	.+16     	; 0x14c <toggleMotorState+0x20>
        goRight();
 13c:	87 df       	rcall	.-242    	; 0x4c <goRight>

        direction = -1;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	90 93 61 00 	sts	0x0061, r25
 146:	80 93 60 00 	sts	0x0060, r24
 14a:	08 95       	ret
    }
    else if (isAtEndStopRight()) {
 14c:	a0 df       	rcall	.-192    	; 0x8e <isAtEndStopRight>
 14e:	89 2b       	or	r24, r25
 150:	41 f0       	breq	.+16     	; 0x162 <toggleMotorState+0x36>
        goLeft();
 152:	79 df       	rcall	.-270    	; 0x46 <goLeft>

        direction = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 61 00 	sts	0x0061, r25
 15c:	80 93 60 00 	sts	0x0060, r24
 160:	08 95       	ret
    }
    else {
        if (direction == -1) {
 162:	80 91 60 00 	lds	r24, 0x0060
 166:	90 91 61 00 	lds	r25, 0x0061
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	41 f4       	brne	.+16     	; 0x17e <toggleMotorState+0x52>
            goLeft();
 16e:	6b df       	rcall	.-298    	; 0x46 <goLeft>

            direction = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 61 00 	sts	0x0061, r25
 178:	80 93 60 00 	sts	0x0060, r24
 17c:	08 95       	ret
        }
        else {
            goRight();
 17e:	66 df       	rcall	.-308    	; 0x4c <goRight>

            direction = -1;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	90 93 61 00 	sts	0x0061, r25
 188:	80 93 60 00 	sts	0x0060, r24
 18c:	08 95       	ret

0000018e <main>:
	/*
	 * Direction
	 */

	// Set PB1 and PB2 as outputs and disable pull-up resistors
	setBit(DDRB, PB0);
 18e:	b8 9a       	sbi	0x17, 0	; 23
	setBit(DDRB, PB1);
 190:	b9 9a       	sbi	0x17, 1	; 23

	stop();
 192:	95 df       	rcall	.-214    	; 0xbe <stop>
	 */

	// End-stops

	// Set PB3 and PB4 as inputs and enable pull-up resistors
	unsetBit(DDRB, PB2);
 194:	ba 98       	cbi	0x17, 2	; 23
	unsetBit(DDRB, PB3);
 196:	bb 98       	cbi	0x17, 3	; 23

	setBit(PORTB, PB2);
 198:	c2 9a       	sbi	0x18, 2	; 24
	setBit(PORTB, PB3);
 19a:	c3 9a       	sbi	0x18, 3	; 24

	// Activation switch

	// Set PB5 as input and enable pull-up resistor
	unsetBit(DDRB, DDB4);
 19c:	bc 98       	cbi	0x17, 4	; 23
	setBit(PORTB, PB4);
 19e:	c4 9a       	sbi	0x18, 4	; 24

	for (;;) {
		 if (isGoingLeft() && isAtEndStopLeft()) {
 1a0:	58 df       	rcall	.-336    	; 0x52 <isGoingLeft>
 1a2:	89 2b       	or	r24, r25
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <main+0x22>
 1a6:	6b df       	rcall	.-298    	; 0x7e <isAtEndStopLeft>
 1a8:	89 2b       	or	r24, r25
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <main+0x22>
            stop();
 1ac:	88 df       	rcall	.-240    	; 0xbe <stop>
 1ae:	f8 cf       	rjmp	.-16     	; 0x1a0 <main+0x12>
        }
        else if (isGoingRight() && isAtEndStopRight()) {
 1b0:	5c df       	rcall	.-328    	; 0x6a <isGoingRight>
 1b2:	89 2b       	or	r24, r25
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <main+0x32>
 1b6:	6b df       	rcall	.-298    	; 0x8e <isAtEndStopRight>
 1b8:	89 2b       	or	r24, r25
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <main+0x32>
            stop();
 1bc:	80 df       	rcall	.-256    	; 0xbe <stop>
 1be:	f0 cf       	rjmp	.-32     	; 0x1a0 <main+0x12>
        }
        else if (getActivationSwitchState()) {
 1c0:	96 df       	rcall	.-212    	; 0xee <getActivationSwitchState>
 1c2:	89 2b       	or	r24, r25
 1c4:	69 f3       	breq	.-38     	; 0x1a0 <main+0x12>
            toggleMotorState();
 1c6:	b2 df       	rcall	.-156    	; 0x12c <toggleMotorState>
 1c8:	eb cf       	rjmp	.-42     	; 0x1a0 <main+0x12>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
